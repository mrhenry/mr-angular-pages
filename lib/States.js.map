{"version":3,"sources":["../src/States.js"],"names":[],"mappings":"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","file":"States.js","sourcesContent":["import {beforeBoot, State, Metadata} from 'fd-angular-core';\nimport {I18n} from 'mr-angular-i18n';\nimport 'mr-util';\nimport {fetchSummaries} from './Api';\nimport {registeredPageTypes, mountPage} from './Page';\nimport {runPreprocessors} from './preprocess';\n\nbeforeBoot(awaitStates());\n\n/**\nPagesController holds all the Lalala pages. Include this state\nto mount all the child pages.\n\n@class PagesController\n*/\n@State({\n\tabstract: true,\n\thidden:   true,\n\ttemplate: `<ui-view></ui-view>`,\n})\nexport class PagesController {}\n\nfunction awaitStates() {\n\treturn fetchSummaries()\n\t\t.then(preprocess)\n\t\t.then(buildStates)\n\t\t.then(exportData);\n}\n\nfunction preprocess(data) {\n\tlet q = [\n\t\trunPreprocessors(data.pages[\"/\"]),\n\t];\n\n\tfor (let locale of I18n.locales) {\n\t\tq.push(runPreprocessors(data.pages[\"/\" + locale]));\n\t}\n\n\treturn Promise.all(q).then(() => data);\n}\n\nfunction buildStates(data) {\n\tlet keys = Object.keys(data.pages);\n\tlet stateIndex = {}, metaIndex = {}, closestParentIndex = {};\n\tlet ctrlMeta = Metadata(PagesController);\n\tkeys.sort();\n\n\tconsole.groupCollapsed(\"Pages\");\n\n\tfor (let path of keys) {\n\t\tlet page = data.pages[path];\n\t\tlet type = data::lookupPageType(page.type);\n\t\tlet meta = Metadata(type);\n\n\t\t// find parent\n\t\tlet idx = path.lastIndexOf('/');\n\t\tlet parentPath = path.slice(0, idx);\n\t\tlet childPath = path.slice(idx);\n\t\tif (parentPath === '') { parentPath = '/'; }\n\n\t\tlet parentState = stateIndex[parentPath];\n\t\tlet parentMeta = metaIndex[parentPath];\n\n\t\tif (parentState && (meta.state.embed || parentMeta.state.embedChildren)) {\n\t\t\tlet state = type::mountPage(page, childPath, { name: path });\n\t\t\tstateIndex[path] = state;\n\t\t\tmetaIndex[path] = meta;\n\t\t\tclosestParentIndex[path] = parentPath;\n\t\t\tconsole.log(\"Page[%s] %o\", path, page);\n\t\t\tparentState.children.push(state);\n\n\t\t} else if (closestParentIndex[parentPath]) {\n\t\t\tlet closestParentPath = closestParentIndex[parentPath];\n\t\t\tparentState = stateIndex[closestParentPath];\n\t\t\tchildPath = path.slice(closestParentPath.length);\n\n\t\t\tlet state = type::mountPage(page, childPath, { name: path });\n\t\t\tstateIndex[path] = state;\n\t\t\tmetaIndex[path] = meta;\n\n\t\t\tclosestParentIndex[path] = closestParentPath;\n\t\t\tconsole.log(\"Page[%s] %o\", path, page);\n\t\t\tparentState.children.push(state);\n\n\t\t} else {\n\t\t\tlet state = type::mountPage(page, path, { name: path });\n\t\t\tstateIndex[path] = state;\n\t\t\tmetaIndex[path] = meta;\n\t\t\tconsole.log(\"Page[%s] %o\", path, page);\n\t\t\tctrlMeta.state.children.push(state);\n\t\t}\n\n\t}\n\n\tconsole.groupEnd();\n\n\treturn data;\n}\n\n/**\nRoots is a map of all the root pages by their locale.\n\n@member Roots\n*/\nexport var Roots = null;\n\n/**\nRoot is the root pages according to the current locale.\n\n@member Root\n*/\nexport var Root = null;\n\n\nfunction exportData(data) {\n\tRoot = data.pages[\"/\"];\n\tRoots = {};\n\n\tfor (let locale of I18n.locales) {\n\t\tRoots[locale] = data.pages[\"/\" + locale];\n\t}\n\n\treturn data;\n}\n\nfunction lookupPageType(name) {\n\tlet missing = [];\n\tlet type = registeredPageTypes[name];\n\n\twhile (!type) {\n\t\tmissing.push(name);\n\n\t\tname = this.types[name];\n\t\tif (!name) {\n\t\t\tthrow Error(\"Unknown page types: \" + missing.join(', '));\n\t\t}\n\n\t\ttype = registeredPageTypes[name];\n\t}\n\n\treturn type;\n}\n"]}